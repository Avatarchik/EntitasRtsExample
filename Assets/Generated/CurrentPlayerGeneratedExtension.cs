//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {

    public partial class Entity {

        public CurrentPlayer currentPlayer { get { return (CurrentPlayer)GetComponent(ComponentIds.CurrentPlayer); } }
        public bool hasCurrentPlayer { get { return HasComponent(ComponentIds.CurrentPlayer); } }

        public Entity AddCurrentPlayer(int newId) {
            var component = CreateComponent<CurrentPlayer>(ComponentIds.CurrentPlayer);
            component.Id = newId;
            return AddComponent(ComponentIds.CurrentPlayer, component);
        }

        public Entity ReplaceCurrentPlayer(int newId) {
            var component = CreateComponent<CurrentPlayer>(ComponentIds.CurrentPlayer);
            component.Id = newId;
            ReplaceComponent(ComponentIds.CurrentPlayer, component);
            return this;
        }

        public Entity RemoveCurrentPlayer() {
            return RemoveComponent(ComponentIds.CurrentPlayer);
        }
    }

    public partial class Pool {

        public Entity currentPlayerEntity { get { return GetGroup(Matcher.CurrentPlayer).GetSingleEntity(); } }
        public CurrentPlayer currentPlayer { get { return currentPlayerEntity.currentPlayer; } }
        public bool hasCurrentPlayer { get { return currentPlayerEntity != null; } }

        public Entity SetCurrentPlayer(int newId) {
            if(hasCurrentPlayer) {
                throw new EntitasException("Could not set currentPlayer!\n" + this + " already has an entity with CurrentPlayer!",
                    "You should check if the pool already has a currentPlayerEntity before setting it or use pool.ReplaceCurrentPlayer().");
            }
            var entity = CreateEntity();
            entity.AddCurrentPlayer(newId);
            return entity;
        }

        public Entity ReplaceCurrentPlayer(int newId) {
            var entity = currentPlayerEntity;
            if(entity == null) {
                entity = SetCurrentPlayer(newId);
            } else {
                entity.ReplaceCurrentPlayer(newId);
            }

            return entity;
        }

        public void RemoveCurrentPlayer() {
            DestroyEntity(currentPlayerEntity);
        }
    }

    public partial class Matcher {

        static IMatcher _matcherCurrentPlayer;

        public static IMatcher CurrentPlayer {
            get {
                if(_matcherCurrentPlayer == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.CurrentPlayer);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherCurrentPlayer = matcher;
                }

                return _matcherCurrentPlayer;
            }
        }
    }
}
