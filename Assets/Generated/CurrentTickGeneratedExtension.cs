//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {

    public partial class Entity {

        public CurrentTick currentTick { get { return (CurrentTick)GetComponent(ComponentIds.CurrentTick); } }
        public bool hasCurrentTick { get { return HasComponent(ComponentIds.CurrentTick); } }

        public Entity AddCurrentTick(long newCurrent) {
            var component = CreateComponent<CurrentTick>(ComponentIds.CurrentTick);
            component.Current = newCurrent;
            return AddComponent(ComponentIds.CurrentTick, component);
        }

        public Entity ReplaceCurrentTick(long newCurrent) {
            var component = CreateComponent<CurrentTick>(ComponentIds.CurrentTick);
            component.Current = newCurrent;
            ReplaceComponent(ComponentIds.CurrentTick, component);
            return this;
        }

        public Entity RemoveCurrentTick() {
            return RemoveComponent(ComponentIds.CurrentTick);
        }
    }

    public partial class Pool {

        public Entity currentTickEntity { get { return GetGroup(Matcher.CurrentTick).GetSingleEntity(); } }
        public CurrentTick currentTick { get { return currentTickEntity.currentTick; } }
        public bool hasCurrentTick { get { return currentTickEntity != null; } }

        public Entity SetCurrentTick(long newCurrent) {
            if(hasCurrentTick) {
                throw new EntitasException("Could not set currentTick!\n" + this + " already has an entity with CurrentTick!",
                    "You should check if the pool already has a currentTickEntity before setting it or use pool.ReplaceCurrentTick().");
            }
            var entity = CreateEntity();
            entity.AddCurrentTick(newCurrent);
            return entity;
        }

        public Entity ReplaceCurrentTick(long newCurrent) {
            var entity = currentTickEntity;
            if(entity == null) {
                entity = SetCurrentTick(newCurrent);
            } else {
                entity.ReplaceCurrentTick(newCurrent);
            }

            return entity;
        }

        public void RemoveCurrentTick() {
            DestroyEntity(currentTickEntity);
        }
    }

    public partial class Matcher {

        static IMatcher _matcherCurrentTick;

        public static IMatcher CurrentTick {
            get {
                if(_matcherCurrentTick == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.CurrentTick);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherCurrentTick = matcher;
                }

                return _matcherCurrentTick;
            }
        }
    }
}
